# pigsty 4-centos7-node sandbox: 2C4G + 3 x 1C2G

Specs = [
  {
    "name" => "pigsty-meta",
    "ip" => "10.10.10.10",
    "cpu" => "2", 
    "mem" => "4096", 
    "image" =>  "generic/centos7",
  },
  {
    "name" => "pigsty-node-01",
    "ip" => "10.10.10.11",
    "cpu" => "1",
    "mem" => "2048",
    "image" =>  "generic/centos7",
  },
  {
    "name" => "pigsty-node-02",
    "ip" => "10.10.10.12",
    "cpu" => "1",
    "mem" => "2048",
    "image" =>  "generic/centos7",
  },
  {
    "name" => "pigsty-node-03",
    "ip" => "10.10.10.13",
    "cpu" => "1",
    "mem" => "2048",
    "image" =>  "generic/centos7",
  },
]

## starup issue (does not affect using)
# 
# meta: SSH address: 127.0.0.1:2222
# meta: SSH username: vagrant
# meta: SSH auth method: private key
# meta: Warning: Connection reset. Retrying...
# meta: Warning: Connection aborted. Retrying...
# ......
# ==> meta: Machine booted and ready!
# This is the Vagrantfile template for the default virtualbox provider

# read ssh key from current user's ~/.ssh
ssh_prv_key = File.read(File.join(ENV['HOME'], '.ssh', 'id_rsa'))
ssh_pub_key = File.readlines(File.join(ENV['HOME'], '.ssh', 'id_rsa.pub')).first.strip
ssh_guest_port = 2200  # avoid using 2222, which collides with wslrelay.exe

pigsty_version='1.26.0'
pigsty_hosts= File.read('conf/hosts')

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  Specs.each_with_index do |spec, index|
    config.vm.define spec["name"] do |node|
      # Every Vagrant development environment requires a box. You can search for
      # boxes at https://vagrantcloud.com/search.
      node.vm.box = spec["image"]
      node.vm.hostname = spec["name"]
      # Create a private network, which allows host-only access to the machine
      # using a specific IP.
      node.vm.network "private_network", ip: spec["ip"]
      # Create a public network, which generally matched to bridged network.
      # Bridged networks make the machine appear as another physical device on
      # your network.
      # config.vm.network "public_network"

      # Create a forwarded port mapping which allows access to a specific port
      # within the machine from a port on the host machine. In the example below,
      # accessing "localhost:8080" will access port 80 on the guest machine.
      # NOTE: This will enable public access to the opened port
      # config.vm.network "forwarded_port", guest: 443, host: 443
      # 
      # Create a forwarded port mapping which allows access to a specific port
      # within the machine from a port on the host machine and only allow access
      # via 127.0.0.1 to disable public access
      # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

      # node.ssh.guest_port = 22
      node.ssh.port = ssh_guest_port + index
      # Must specified `id: "ssh"` in order to override the default forwarded SSH port.
      # Otherwise, a new port forwarding would be established.
      # <https://realguess.net/2015/10/06/overriding-the-default-forwarded-ssh-port-in-vagrant/>
      node.vm.network "forwarded_port", guest: 22, host: ssh_guest_port + index, auto_correct: true, id: "ssh"
      # if spec["name"].start_with?("pigsty-meta")
      #   node.vm.network "forwarded_port", guest: 6443, host: 6443, host_ip: "127.0.0.1"
      # end

      # provision an additional disk for minio nodes
      if spec["name"].start_with?("minio")
          node.vm.disk :disk, name: "main", size: "128GB", primary: true
          node.vm.disk :disk, name: "data1", size: "32GB"
          node.vm.provision "shell" do |s|
            s.inline = <<-SHELL
              mkdir /data; mkfs.xfs /dev/sdb;
              mount -o noatime -o nodiratime -t xfs /dev/sdb /data;
              echo "/dev/sdb /data xfs defaults,noatime,nodiratime 0 0" >> /etc/fstab;
            SHELL
          end
      end

      node.vm.provider "virtualbox" do |v|
          v.linked_clone = true
          v.customize [
            "modifyvm", :id,
            "--cpus", spec["cpu"],
            "--memory", spec["mem"],
            "--nictype1", "virtio",
            "--nictype2", "virtio",
            "--hwvirtex", "on",
            "--ioapic", "on",
            "--rtcuseutc", "on",
            "--vtxvpid", "on",
            "--largepages", "on"
          ]
          v.customize [
            "guestproperty",
            "set",
            :id, "/VirtualBox/GuestAdd/VBoxService/--timesync-set-threshold", 1000
          ]
      end
    end
  end

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.
  
  config.ssh.insert_key = false
  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  config.vm.box_check_update = false
  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "./releases", "/opt/pigsty"

  # Disable the default share of the current code directory. Doing this
  # provides improved isolation between the vagrant box and your host
  # by making sure your Vagrantfile isn't accessible to the vagrant box.
  # If you use this you may want to enable additional shared subfolders as
  # shown above.
  # config.vm.synced_folder ".", "/vagrant", disabled: true

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell" do |s|
    s.inline = <<-SHELL
      #!/bin/bash -e
      if grep -sq "#{ssh_pub_key}" /home/vagrant/.ssh/authorized_keys; then
        echo "SSH keys already provisioned."
      else
        echo "SSH key provisioning."
        sshd=/home/vagrant/.ssh
        mkdir -p ${sshd}
        touch ${sshd}/{authorized_keys,config}
        echo "#{ssh_pub_key}" >> ${sshd}/authorized_keys
        echo "#{ssh_pub_key}" >  ${sshd}/id_rsa.pub
        chmod 644 ${sshd}/id_rsa.pub
        echo "#{ssh_prv_key}" >  ${sshd}/id_rsa
        # Permissions 0644 for '/home/vagrant/.ssh/id_rsa' are too open.
        chmod 600 ${sshd}/id_rsa
        if ! grep -q "StrictHostKeyChecking" ${sshd}/config; then
            echo 'StrictHostKeyChecking=no' >> ${sshd}/config
        fi
        chown -R vagrant:vagrant /home/vagrant
      fi
      
      hosts=$(cat /etc/hosts)
      if ! grep '\# pigsty hostname' </etc/hosts >/dev/null; then
        {
          echo "#{pigsty_hosts}"
          echo ""
          sed -E 's/(127.*pigsty-.*)/\#\\1/' <<<"$hosts"
        } >/etc/hosts
        timedatectl set-timezone 'Asia/Shanghai' 
      fi
      node_ip=$(sed -En "s/^\\s*([0-9.]+)\\s+$(hostname).*/\\1/p" /etc/hosts)
      if [ -z "$node_ip" ]; then
        echo "error: cannot find hostname-ip mapping for $(hostname)!"
        cat /etc/hosts
        exit 1
      fi

      # do local installation of pigsty  
      if grep pigsty-meta <<<"$(hostname)"; then
        echo "do pigsty meta ($node_ip) initialization ......"
      elif grep pigsty-node <<<"$(hostname)"; then
        echo "do pigsty node ($node_ip) initialization ......"
      fi
      exit 0
    SHELL
  end    
end
